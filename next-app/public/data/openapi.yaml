openapi: 3.0.0
info:
  title: Probo API
  description: API for creating users, symbols, managing orders, and balances in a probo like opinions trading platform.
servers:
  - url: http://{serverHost}:{serverPort}
    variables:
      serverHost:
        default: localhost
      serverPort:
        default: 3000
paths:
  /user/create/{userId}:
    post:
      summary: Create a new user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User successfully created
          content:
            application/json:
              example:
                msg: "User created successfully"
  /onramp/inr:
    post:
      summary: Deposit INR to a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                amount:
                  type: number
      responses:
        200:
          description: Amount successfully deposited
          content:
            application/json:
              example:
                msg: "INR deposited successfully"
  /balance/inr/{userId}:
    get:
      summary: Get a user's INR balance
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User balance
          content:
            application/json:
              example:
                msg:
                  balance: 1000000
                  locked: 0
  /symbol/create/{symbol}:
    post:
      summary: Create a new stock symbol
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Symbol successfully created
          content:
            application/json:
              example:
                msg: "Symbol created successfully"
  /orderbook/{symbol}:
    get:
      summary: Get orderbook for a symbol
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Orderbook retrieved successfully
          content:
            application/json:
              example:
                msg:
                  yes:
                    "8.5":
                      total: 10
                      orders:
                        buyer2:
                          type: "reverted"
                          quantity: 10
                  no:
                    "2.5":
                      total: 10
                      orders:
                        seller3:
                          type: "sell"
                          quantity: 10
  /order/buy:
    post:
      summary: Place a buy order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                stockSymbol:
                  type: string
                quantity:
                  type: number
                price:
                  type: number
                stockType:
                  type: string
                  enum: [yes, no] # Restriction on stockType values
      responses:
        200:
          description: Buy order successfully placed
          content:
            application/json:
              example:
                msg: "Buy order placed successfully"
  /order/sell:
    post:
      summary: Place a sell order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                stockSymbol:
                  type: string
                quantity:
                  type: number
                price:
                  type: number
                stockType:
                  type: string
                  enum: [yes, no] # Restriction on stockType values
      responses:
        200:
          description: Sell order successfully placed
          content:
            application/json:
              example:
                msg: "Sell order placed successfully"
  /balance/stock/{userId}:
    get:
      summary: Get a user's stock balance
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User's stock balance
          content:
            application/json:
              example:
